/*
 * Embers API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.71
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Agent from '../model/Agent';
import Agents from '../model/Agents';
import CreateAgentReq from '../model/CreateAgentReq';
import CreateAgentResp from '../model/CreateAgentResp';
import CreateTestwalletResp from '../model/CreateTestwalletResp';
import DeployAgentResp from '../model/DeployAgentResp';
import DeploySignedTestReq from '../model/DeploySignedTestReq';
import DeploySignedTestResp from '../model/DeploySignedTestResp';
import DeployTestReq from '../model/DeployTestReq';
import DeployTestResp from '../model/DeployTestResp';
import InternalError from '../model/InternalError';
import SaveAgentResp from '../model/SaveAgentResp';
import SignedContract from '../model/SignedContract';

/**
* AIAgents service.
* @module api/AIAgentsApi
* @version 0.1.0
*/
export default class AIAgentsApi {

    /**
    * Constructs a new AIAgentsApi. 
    * @alias module:api/AIAgentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiAiAgentsAddressGet operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Agents{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} address 
     * @param {module:api/AIAgentsApi~apiAiAgentsAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAiAgentsAddressGet(address, callback) {
      
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling apiAiAgentsAddressGet");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Agents;

      return this.apiClient.callApi(
        '/api/ai-agents/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsAddressIdVersionDeployPreparePost operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsAddressIdVersionDeployPreparePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployAgentResp{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} address 
     * @param {String} id 
     * @param {String} version 
     * @param {module:api/AIAgentsApi~apiAiAgentsAddressIdVersionDeployPreparePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAiAgentsAddressIdVersionDeployPreparePost(address, id, version, callback) {
      
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling apiAiAgentsAddressIdVersionDeployPreparePost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAiAgentsAddressIdVersionDeployPreparePost");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiAiAgentsAddressIdVersionDeployPreparePost");
      }

      let pathParams = {
        'address': address,'id': id,'version': version
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = DeployAgentResp;

      return this.apiClient.callApi(
        '/api/ai-agents/{address}/{id}/{version}/deploy/prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsAddressIdVersionDeploySendPost operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsAddressIdVersionDeploySendPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SignedContract} body 
     * @param {String} address 
     * @param {String} id 
     * @param {String} version 
     * @param {module:api/AIAgentsApi~apiAiAgentsAddressIdVersionDeploySendPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAiAgentsAddressIdVersionDeploySendPost(body, address, id, version, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiAiAgentsAddressIdVersionDeploySendPost");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling apiAiAgentsAddressIdVersionDeploySendPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAiAgentsAddressIdVersionDeploySendPost");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiAiAgentsAddressIdVersionDeploySendPost");
      }

      let pathParams = {
        'address': address,'id': id,'version': version
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/ai-agents/{address}/{id}/{version}/deploy/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsAddressIdVersionGet operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsAddressIdVersionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Agent{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} address 
     * @param {String} id 
     * @param {String} version 
     * @param {module:api/AIAgentsApi~apiAiAgentsAddressIdVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAiAgentsAddressIdVersionGet(address, id, version, callback) {
      
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling apiAiAgentsAddressIdVersionGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAiAgentsAddressIdVersionGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiAiAgentsAddressIdVersionGet");
      }

      let pathParams = {
        'address': address,'id': id,'version': version
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Agent;

      return this.apiClient.callApi(
        '/api/ai-agents/{address}/{id}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsAddressIdVersionsGet operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsAddressIdVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Agents{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} address 
     * @param {String} id 
     * @param {module:api/AIAgentsApi~apiAiAgentsAddressIdVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAiAgentsAddressIdVersionsGet(address, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling apiAiAgentsAddressIdVersionsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAiAgentsAddressIdVersionsGet");
      }

      let pathParams = {
        'address': address,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Agents;

      return this.apiClient.callApi(
        '/api/ai-agents/{address}/{id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsCreatePreparePost operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsCreatePreparePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAgentResp{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAgentReq} body 
     * @param {module:api/AIAgentsApi~apiAiAgentsCreatePreparePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAiAgentsCreatePreparePost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiAiAgentsCreatePreparePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = CreateAgentResp;

      return this.apiClient.callApi(
        '/api/ai-agents/create/prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsCreateSendPost operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsCreateSendPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SignedContract} body 
     * @param {module:api/AIAgentsApi~apiAiAgentsCreateSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAiAgentsCreateSendPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiAiAgentsCreateSendPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/ai-agents/create/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsIdSavePreparePost operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsIdSavePreparePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaveAgentResp{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAgentReq} body 
     * @param {String} id 
     * @param {module:api/AIAgentsApi~apiAiAgentsIdSavePreparePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAiAgentsIdSavePreparePost(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiAiAgentsIdSavePreparePost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAiAgentsIdSavePreparePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = SaveAgentResp;

      return this.apiClient.callApi(
        '/api/ai-agents/{id}/save/prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsIdSaveSendPost operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsIdSaveSendPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SignedContract} body 
     * @param {String} id 
     * @param {module:api/AIAgentsApi~apiAiAgentsIdSaveSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAiAgentsIdSaveSendPost(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiAiAgentsIdSaveSendPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAiAgentsIdSaveSendPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/ai-agents/{id}/save/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsTestDeployPreparePost operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsTestDeployPreparePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployTestResp{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeployTestReq} body 
     * @param {module:api/AIAgentsApi~apiAiAgentsTestDeployPreparePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAiAgentsTestDeployPreparePost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiAiAgentsTestDeployPreparePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = DeployTestResp;

      return this.apiClient.callApi(
        '/api/ai-agents/test/deploy/prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsTestDeploySendPost operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsTestDeploySendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploySignedTestResp{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeploySignedTestReq} body 
     * @param {module:api/AIAgentsApi~apiAiAgentsTestDeploySendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAiAgentsTestDeploySendPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiAiAgentsTestDeploySendPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = DeploySignedTestResp;

      return this.apiClient.callApi(
        '/api/ai-agents/test/deploy/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAiAgentsTestWalletPost operation.
     * @callback moduleapi/AIAgentsApi~apiAiAgentsTestWalletPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTestwalletResp{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AIAgentsApi~apiAiAgentsTestWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAiAgentsTestWalletPost(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = CreateTestwalletResp;

      return this.apiClient.callApi(
        '/api/ai-agents/test/wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}