/*
 * Embers API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.71
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import SignedContract from '../model/SignedContract';
import TransferReq from '../model/TransferReq';
import TransferResp from '../model/TransferResp';
import WalletStateAndHistory from '../model/WalletStateAndHistory';

/**
* Wallets service.
* @module api/WalletsApi
* @version 0.1.0
*/
export default class WalletsApi {

    /**
    * Constructs a new WalletsApi. 
    * @alias module:api/WalletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiWalletsAddressStateGet operation.
     * @callback moduleapi/WalletsApi~apiWalletsAddressStateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletStateAndHistory{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} address 
     * @param {module:api/WalletsApi~apiWalletsAddressStateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiWalletsAddressStateGet(address, callback) {
      
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling apiWalletsAddressStateGet");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = WalletStateAndHistory;

      return this.apiClient.callApi(
        '/api/wallets/{address}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiWalletsTransferPreparePost operation.
     * @callback moduleapi/WalletsApi~apiWalletsTransferPreparePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferResp{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TransferReq} body 
     * @param {module:api/WalletsApi~apiWalletsTransferPreparePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiWalletsTransferPreparePost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiWalletsTransferPreparePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = TransferResp;

      return this.apiClient.callApi(
        '/api/wallets/transfer/prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiWalletsTransferSendPost operation.
     * @callback moduleapi/WalletsApi~apiWalletsTransferSendPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SignedContract} body 
     * @param {module:api/WalletsApi~apiWalletsTransferSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletsTransferSendPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiWalletsTransferSendPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/wallets/transfer/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}